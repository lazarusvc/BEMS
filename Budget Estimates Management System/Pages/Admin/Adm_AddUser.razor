@using DataAccessLibrary.Models;
@using DataAccessLibrary;
@inject IDbData _db;
@attribute [Authorize(Roles = "Administrator")]


<div class="modal fade" id="newUser" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered ">
   <EditForm EditContext="EditContext"  OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="staticBackdropLabel">Add User</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        
 
     <DataAnnotationsValidator />


                    <div class="form-floating" style="padding-bottom:5px">
           <InputText  @bind-Value="user.userName" class="form-control" placeholder="GOCD User Name">               
                </InputText>
        <label for="label" >
            GOCD Username
        </label>
    </div>    

        <div class="form-floating" style="padding-bottom:5px">
           <InputSelect id="userRole"  class="form-select"
                       @bind-Value="user.userRole">
            @if (roles is null)
                    {
                        <option selected>Loading...</option>
                    }
                else 
                    {
                @foreach (var item in roles)
                    {
                <option value=@item.Name>@item.Description</option>
                    }}
                </InputSelect>
        <label for="userRole" >
           User Role
        </label>

    </div> 

   <div style="color: red">
        @saveError
      </div>
         <div style="color: green">
        @saveSuccess
      </div>

      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
         <button type="submit" class="btn btn-success">Save</button>
      </div>
    </div>
    </EditForm>
  </div>
  </div>


@code {
    [Parameter]
    public EventCallback OnSaveUser { get; set; }


    private EditContext EditContext;

    private UserModel user = new UserModel();
    private List<ListItemModel>? roles;

    private string saveError = String.Empty;
    private string saveSuccess = String.Empty;

    protected override async Task OnInitializedAsync()
    {
        //Initial Edit Context
        EditContext = new EditContext(user);        
        roles = await _db.GetUserRoles();
        user.userRole = "MinistryStaff";

    }

    private async void  HandleValidSubmit()
    {     
        saveError = string.Empty;
        saveSuccess = string.Empty;
        try
        {
            int affectedRows=  await _db.AddNewUser(user);      
            //save successfully.  Reset form
            if (affectedRows==0)
            {
                saveError = "Something happened.  Record was not saved";
                base.StateHasChanged();
            } else
            {
                user=new UserModel();
                EditContext = new EditContext(user);
                EditContext.OnFieldChanged += EditContext_OnFieldChanged;
                user.userRole = "MinistryStaff";                
                saveSuccess = "Record Successfully Saved.";
                base.StateHasChanged();
                //run the parent procedure
                await OnSaveUser.InvokeAsync();
                
            }
           
        }
        catch(Exception e)
        {
            if (e.Message.Contains("PK_Users"))
            {
                saveError = "User already entered";
            }
            else { saveError = e.Message; }
            base.StateHasChanged();
        }
        
    }

    private  void  HandleInvalidSubmit()
    {     
        saveSuccess = String.Empty;
        saveError = "Enter a Username. Thank you.";
        base.StateHasChanged();                
    }
    private void EditContext_OnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        //clear any save messages because we entering new stull
        saveSuccess = String.Empty;
        saveError = String.Empty;
    }

}
