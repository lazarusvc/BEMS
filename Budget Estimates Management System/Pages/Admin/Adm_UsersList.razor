@using Budget_Estimates_Management_System.Models;
@using DataAccessLibrary.Models;
@using DataAccessLibrary;
@inject IDbData _db;
@attribute [Authorize(Roles = "Administrator")]

    
    <br />
    <div class="row">
        <div class="col-3">
             <input @bind="searchfilter" @bind:event="oninput" class="form-control" placeholder="Search for user">
        </div>
         <div class="col-2">
            <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#newUser">Add New User</button>
        </div>

    </div>

    <p />
    <Adm_AddUser OnSaveUser="RefreshList"></Adm_AddUser>
    <p />
    <div class="col-6" >
    <table class="table table-hover ">
  <thead>
    <tr>
      <th scope="col">User Name</th>
      <th scope="col">User Role</th>
      <th scope="col"></th>
    </tr>
  </thead>
  <tbody>

       @if (users is not null)
        {
          @foreach (var user in users.Where(x=>x.userName.Contains(searchfilter)||String.IsNullOrWhiteSpace(searchfilter)))
        {
                  <tr>
          <td>@user.userName</td>
                        <td>
                            @user.roleDescp                     
                        </td>
                        <td>
              <div class="btn-group" role="group">
              <div class="btn-group me-2" role="group">
                <button type="button" class="btn btn-outline-primary btn-sm" @onclick="()=>{selectedUser=user;}" data-bs-toggle="modal" data-bs-target="#editUser" data-toggle="tooltip"  title="Change Role"><span class="oi oi-pencil"></span></button>                
              </div>
              <div class="btn-group me-2" role="group">
                <button type="button" class="btn btn-outline-info btn-sm" @onclick="()=>{selectedUser=user;}" data-bs-toggle="modal" data-bs-target="#userAccess" data-toggle="tooltip"  title="Set Access to Sub-programs"><span class="oi oi-eye"></span></button>                
              </div>
              <div class="btn-group me-2" role="group" >
                 <div class="dropdown">
			  <button class="btn btn-outline-danger btn-sm dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false" data-toggle="tooltip"  title="Delete User">
				<span class="oi oi-delete"></span>
			  </button>
			  <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
				<li><a class="dropdown-item" href="javascript:void(0)" @onclick="()=>{DeleteClicked(user);}">Delete</a></li>
			  </ul>
			</div>
              </div>            
            </div>

          </td>
        </tr> 
        }
    }

  </tbody>
        <tfoot>
          <tr>
              @if (users is not null)
                {<td colspan="3" >Search Results:  <b>@users.Where(x=>x.userName.Contains(searchfilter)||String.IsNullOrWhiteSpace(searchfilter)).Count() </b> <div style ="color:blue;">@(users.Where(x=>x.userName.Contains(searchfilter)||String.IsNullOrWhiteSpace(searchfilter)).Count()>10?"Only showing the first 10 results.":"")</div>  </td>
                } 
                else
                {
                  <td colspan="3" >No Users Found</td>
                }

        </tr>
      </tfoot>    
</table>
</div>

<Adm_EditUser OnSaveUser="RefreshList" parUser="selectedUser"></Adm_EditUser>
<Adm_UserAccess parUser="selectedUser"></Adm_UserAccess>

@code {

    private List<UserModel> users;

    private UserModel selectedUser;
    private List<ListItemModel> roles;

    private string searchfilter { get; set; } = String.Empty;

    protected override async Task OnInitializedAsync()
    {
        //Initial Edit Context
        roles = await _db.GetUserRoles();
        users = await _db.GetUsers();
    }

    private async void RefreshList()
    {
        selectedUser = null;
        users = await _db.GetUsers();
        base.StateHasChanged();
    }

    private async void DeleteClicked(UserModel usr)
    {
        //save new record.
        try
        {
            int affectedRows= await _db.DeleteUser(usr.userName);          
            //save successfully.  Reset form
            if (affectedRows!=0)
            {
                //refresh list
                users.Remove(usr);
              //invoke refresh
                base.StateHasChanged();
            } 
              

        }
        catch (Exception e)
        {

        }
    }
    

}
