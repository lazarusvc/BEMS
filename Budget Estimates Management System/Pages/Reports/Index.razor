@page "/reports"
@using DataAccessLibrary.Models;
@using DataAccessLibrary;
@inject IDbData _db;
@inject IRecEstimateData _rdb;
@inject AuthenticationStateProvider authStateProvider;


<h1>Reports</h1>

<div class="row" style="background-color:darkkhaki; padding-top:15px">
<div class="col-3">
		<div class="input-group mb-3">
			<label class="input-group-text" for="inputGroupSelect01">Year</label>
			<select class="form-select" id="inputGroupSelect01" @onchange="onYearChanged">
				@if (years is null)
				{
					<option selected>Loading...</option>
				}
				else
				{
					@foreach (var year in years)
					{
						<option value=@year.year selected=@(year.ready_for_data_entry? true:false)>@year.displayYear @(year.year_closed ? "(Year Closed)" : "") @(!year.ready_for_data_entry && !year.year_closed ? "(Not Open)" : "")</option>
					}
				}
			</select>
		</div>
       
	</div>

	<div class="col-3">
		<div class="input-group mb-3">
			<label class="input-group-text" for="inputGroupSelect01">Report</label>
			<select class="form-select" id="inputGroupSelect01" @onchange="onReportChanged">				
				@if (reports is null)
				{
					<option selected>Loading...</option>
				}
				else
				{
					<option value="0" selected>Choose...</option>
					@foreach (var report in reports)
					{
						<option value=@report.id>@report.reportDesc</option>
					}
				}
			</select>
		</div>

	</div>
	<div class="col-3">
		<button class="btn btn-outline-primary" @onclick="RunReport"><span class="oi oi-bar-chart"></span> Run Report</button>

	</div>
</div>

@if (reportSelected is not null) {
	<div class="row" style="background-color:lightgoldenrodyellow; padding-top:15px">
		
		@if (reportSelected.parMinistry)
		{
			<div class="col-4">
			<div class="input-group mb-3">
				<label class="input-group-text" for="inputGroupSelect01">Ministry</label>
				<select class="form-select" id="parMinistry" @onchange="MinistryChanged">
					@if (ministries is null)
					{
						<option selected>Loading...</option>
					}
					else
					{
							<option value="" selected>Choose...</option>
						@foreach (var item in ministries)
						{
							<option value=@item.Name>@item.Name - @item.Description</option>
						}
					}
				</select>
			</div>
		</div>
	}
	@if (reportSelected.parProgram)
		{
			<div class="col-4">
			<div class="input-group mb-3">
				<label class="input-group-text" for="inputGroupSelect01">Program</label>
				<select class="form-select" id="parProgram" @onchange="ProgramChanged">
					@if (programs is null)
					{
						<option selected>Select Ministry First...</option>
					}
					else
					{
							<option value="" selected>Choose...</option>
						@foreach (var item in programs)
						{
							<option value=@item.Name>@item.Name - @item.Description</option>
						}
					}
				</select>
			</div>
		</div>
	}
		@if (reportSelected.parSubprogram)
		{
			<div class="col-4">
				<div class="input-group mb-3">
					<label class="input-group-text" for="inputGroupSelect01">Sub-Program</label>
					<select class="form-select" id="parSubprogram" @onchange="SubProgramChanged">
						@if (subprograms is null)
						{
							<option selected>Select Program First...</option>
						}
						else
						{
							<option value="" selected>Choose...</option>
							@foreach (var item in subprograms)
							{
								<option value=@item.Name>@item.Name - @item.Description</option>
							}
						}
					</select>
				</div>
			</div>
		}
	</div>

	<div class="row" style="background-color:lightgoldenrodyellow; padding-top:15px">
		@if (reportSelected.parSOC)
		{
			<div class="col-4">
				<div class="input-group mb-3">
					<label class="input-group-text" for="inputGroupSelect01">SOC</label>
					<select class="form-select" id="parSOC" @onchange="AccountTypeChanged">
						@if (accountTypes is null)
						{
							<option selected>Select Sub-Program First...</option>
						}
						else
						{
							<option value="" selected>Choose...</option>
							@foreach (var item in accountTypes)
							{
								<option value=@item.Name>@item.Name - @item.Description</option>
							}
						}
					</select>
				</div>
			</div>
		}
		@if (reportSelected.parAccount)
		{
			<div class="col-4">
				<div class="input-group mb-3">
					<label class="input-group-text" for="inputGroupSelect01">Account</label>
					<select class="form-select" id="parAccount" @onchange="AccountChanged">
						@if (accounts is null)
						{
							<option selected>Select SOC First...</option>
						}
						else
						{
							<option value="" selected>Choose...</option>
							@foreach (var item in accounts)
							{
								<option value=@item.Name>@item.Name - @item.Description</option>
							}
						}
					</select>
				</div>
			</div>
		}
	</div>
}

<ReportViewer></ReportViewer>

@code {
	private List<ProcessingYearModel> years;
	private List<ReportConfigModel> reports;
	private int year_selected = 0;
	private ReportConfigModel reportSelected = new ReportConfigModel();

	private string username;

	private List<ListItemModel> ministries;
	private List<ListItemModel> programs;
	private List<ListItemModel> subprograms;
	private List<ListItemModel> accountTypes;
	private List<ListItemModel> accounts;

	private string parMinistry;
	private string parProgram;
	private string parSubProg;
	private string parSOC;
	private string parAccount;

	private bool runReport = false;

	protected override async Task OnInitializedAsync()
	{
		//Initial Edit Context
		years = await _db.GetYears();
		year_selected = years.Where(y => y.ready_for_data_entry).FirstOrDefault().year;
		var authState = await authStateProvider.GetAuthenticationStateAsync();
		username = authState.User.Identity.Name;
		//get the reports
		reports = await _db.GetAllReportConfig();
		if (!authState.User.IsInRole("MinistryStaff")) { return; }
		years = years.FindAll(e => e.ready_for_data_entry == true||e.year_closed==true);

	}

	private void onYearChanged(ChangeEventArgs e)
	{
		year_selected = Int16.Parse(e.Value.ToString());
	}

	private async void onReportChanged(ChangeEventArgs e)
	{
		try
		{
			reportSelected = reports.Where(x => x.id.ToString().Equals(e.Value.ToString())).FirstOrDefault();
			//Reset drop lists
			ministries=null;
			programs=null;
			subprograms=null;
			accountTypes=null;
			accounts = null;
			if (reportSelected is not null && (reportSelected.parMinistry))
			{ ministries = await _rdb.GetDependantMinistries(username); 
			}
			if (reportSelected is not null && (!reportSelected.parMinistry&& reportSelected.parSOC))
			{
				accountTypes = await _rdb.GetDependantAccountTypes();
			}
			base.StateHasChanged();
		}
		catch (Exception)
		{

			reportSelected = null;
		}
	}

	private async void MinistryChanged(ChangeEventArgs e)
	{
		parMinistry = e.Value.ToString();
		//need to clear all dependencies
		parProgram = null;
		parSubProg = null;
		parAccount = null;
		parSOC = null;
		if (reportSelected.parProgram)
		{
			programs = await _rdb.GetDependantPrograms(parMinistry, username);
		}
		base.StateHasChanged();
	}

	private async void ProgramChanged(ChangeEventArgs e)
	{
		parProgram = e.Value.ToString();
		//need to clear all dependencies
		parSubProg = null;
		parAccount = null;
		parSOC = null;
		if (reportSelected.parSubprogram)
		{
			subprograms = await _rdb.GetDependantSubPrograms(parMinistry, parProgram, username);
		}
		base.StateHasChanged();
	}

	private async void SubProgramChanged(ChangeEventArgs e)
	{
		parSubProg = e.Value.ToString();
		//need to clear all dependencies
		parAccount = null;
		parSOC = null;
		if (reportSelected.parSOC)
		{
			accountTypes = await _rdb.GetDependantAccountTypes();
		}
		base.StateHasChanged();
	}

	private async void AccountTypeChanged(ChangeEventArgs e)
	{
		parSOC = e.Value.ToString();
		//need to clear all dependencies
		parAccount = null;
		accounts = await _rdb.GetDependantAccounts(parSOC);
		base.StateHasChanged();
	}

	private async void AccountChanged(ChangeEventArgs e)
	{
		parAccount = e.Value.ToString();				
	}

	private void RunReport()
	{
	    runReport = true;
	}
}
