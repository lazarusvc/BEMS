@page "/addentry"
@using  Budget_Estimates_Management_System.Models;
@using DataAccessLibrary.Models;
@using DataAccessLibrary;
@inject IDbData _db;
@inject IRecEstimateData _rdb;

<EditForm Model="@entry">
    <h3>Add Budget Entry</h3>
    <hr />

    <div  class="form-floating">
            <InputSelect id="processingYear" placeholder="Year" class="form-select"
                       @bind-Value="entry.processing_year" >
                        @if (years == null)
                        {
                            <option selected>Loading...</option>
                        }
                    else 
                        {
                       @foreach (var year in years.Where(x=>!x.year_closed))
                            {
                                <option value=@year.year>@year.displayYear</option>
                            }
        }
                </InputSelect>
        <label for="processingYear" >
            Processing Year
        </label>
    </div>
    <div  class="form-floating">
        <label for="ministry">
                 <InputSelect id="ministry" placeholder="Ministry" class="form-select"
                       @bind-Value="entry.ministry" >
                        @if (ministries == null)
                        {
                            <option selected>Loading...</option>
                        }
                    else 
                        {
                       @foreach (var item in ministries)
                            {
                                <option value=@item.item>@item.itemName</option>
                            }
        }
                </InputSelect>
            Ministry
        </label>

    </div>
        <div class="form-floating">
                   <InputSelect id="program" placeholder="Program" class="form-select"
                       @bind-Value="entry.program" >
                        @if (programs == null)
                        {
                            <option selected>Loading...</option>
                        }
                    else 
                        {
                       @foreach (var item in programs)
                            {
                                <option value=@item.item>@item.itemName</option>
                            }
        }
                </InputSelect>
        <label for="program">
            Program
        </label>

    </div>
        <div class="form-floating">
               <InputSelect id="subprogram" placeholder="Sub-Program" class="form-select"
                       @bind-Value="entry.subprog" >
                        @if (subprograms == null)
                        {
                            <option selected>Loading...</option>
                        }
                    else 
                        {
                       @foreach (var item in subprograms)
                            {
                                <option value=@item.item>@item.itemName</option>
                            }
        }
                </InputSelect>
        <label for="subprog">
            Sub-Program
        </label>

    </div> 
    <div class="form-floating">
           <InputSelect id="account" placeholder="Account" class="form-select"
                       @bind-Value="entry.account" >
                        @if (accounts == null)
                        {
                            <option selected>Loading...</option>
                        }
                    else 
                        {
                       @foreach (var item in accounts)
                            {
                                <option value=@item.item>@item.itemName</option>
                            }
        }
                </InputSelect>
        <label for="account" >
            Account
        </label>

    </div> 

</EditForm>

@code {
    [Parameter]
    public int year { get; set; }
    [Parameter]
    public string ministry { get; set; }
    [Parameter]
    public string program { get; set; }
    [Parameter]
    public string subprogram { get; set; }
    [Parameter]
    public string accountType { get; set; }

    private Budget_Estimates_Management_System.Models.BudgetEstimatesModel entry = new Budget_Estimates_Management_System.Models.BudgetEstimatesModel();
    private List<ProcessingYearModel> years;
    private List<ListModel> ministries;
    private List<ListModel> programs;
    private List<ListModel> subprograms;
    private List<ListModel> accounts;

    protected override async Task OnInitializedAsync()
    {
        //set up the drop lists
        years = await _db.GetYears();

        if (year!=null) { entry.processing_year=year; }
        //Get the list data for ministry
        ministries = await _rdb.GetDependantMinistries();
        if (ministry!=null) { 
            entry.ministry=ministry; 
            programs = await _rdb.GetDependantPrograms(entry.ministry);
        }
        if (program!=null) { 
            entry.program=program;
            subprograms = await _rdb.GetDependantSubPrograms(entry.ministry,entry.program);
        }
        if (subprogram!=null) { 
            entry.subprog=subprogram; 
            accounts = await _rdb.GetDependantAccounts(entry.ministry,entry.program,entry.subprog);
        }
        if (accountType!=null) { 
             accounts = (await _rdb.GetDependantAccounts(entry.ministry,entry.program,entry.subprog)).Where(x=>x.item.StartsWith(accountType)).ToList();
        }

    }


}
