@page "/recurrent/{year:int}/{ministry}/{program}/{subprogram}/{account}"
@using Budget_Estimates_Management_System.Models;
@using DataAccessLibrary.Models;
@using DataAccessLibrary;
@inject IDbData _db;
@inject IRecEstimateData _rdb;

<RecNav year=@year ministry=@ministry program=@program subprogram=@subprogram account=@account></RecNav>
<h5><a href="/recurrent/@year/@ministry">@ministry - @ministryName</a></h5>
<h4><a href="/recurrent/@year/@ministry/@program">@program - @programName</a></h4>
<h3><a href="/recurrent/@year/@ministry/@program/@subprogram">@subprogram - @subprogramName</a></h3>
<h2>@account - @accountName</h2>

 

@code {
	[Parameter]
    public int year { get; set; }
    [Parameter]
    public string ministry { get; set; }
    [Parameter]
    public string program { get; set; }
    [Parameter]
    public string subprogram { get; set; }
    [Parameter]
    public string account { get; set; }

    private string ministryName;
    private string programName;
    private string subprogramName;
    private string accountName;

    protected override async Task OnInitializedAsync()
    {
        try { ministryName= await _db.GetMinistryName(ministry); } catch{}
        try { programName = await _db.GetProgramName(program); } catch{}
        try { subprogramName = await _db.GetSubProgramName(subprogram); } catch{}
        try { accountName = await _db.GetSubProgramName(subprogram); } catch{}
        
    }

     protected override async void OnParametersSet()
    {
          try { ministryName= await _db.GetMinistryName(ministry); } catch{}
        try { programName = await _db.GetProgramName(program); } catch{}
        try { subprogramName = await _db.GetSubProgramName(subprogram); } catch{}
        try { accountName = await _db.GetSubProgramName(subprogram); } catch{}
        base.StateHasChanged();
    }

}
