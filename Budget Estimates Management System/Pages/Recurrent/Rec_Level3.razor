@page "/recurrent/{year:int}/{ministry}/{program}"
@using Budget_Estimates_Management_System.Models;
@using DataAccessLibrary.Models;
@using DataAccessLibrary;
@inject IJSRuntime JsRuntime
@inject IDbData _db;
@inject IRecEstimateData _rdb;
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider authStateProvider;
@attribute [Authorize(Roles = "Administrator,MinistryStaff,BudgetStaff")]

<Rec_Nav year=@year ministry=@ministry program=@program OnSaveEntry="RefreshList"></Rec_Nav>
<h3><a href="/recurrent/@year/@ministry">@ministry - @ministryName</a></h3>
<h2>@program - @programName</h2>

@if (subprogramGroup is null )
{
   <Loading></Loading>
}
else {
    @if  (subprogramGroup.Count==0)
    {
            <p>No entries found for @year - @(year+1)</p>
    }
    else
    {
        <table class="table table-hover">
  
             <thead style="background-color:lightskyblue">
                <tr>
                  <th></th>
                  <th scope="col">#</th>                  
                  <th scope="col">Sub Program</th>
                  <th scope="col" class="text-end">Estimates<br>@(year-1)/@(year)</th>
                  <th scope="col" class="text-end">Estimates <br>@year/@(year+1) </th>
                  <th scope="col" class="text-end">Estimates <br>@(year+1)/@(year+2) </th>
                  <th scope="col" class="text-end">Estimates <br>@(year+2)/@(year+3)</th>
                </tr>
              </thead>
      <tbody>
            @foreach (var item in subprogramGroup)
            {
                    <tr> 
                        <td style="width: 13%">
               <button class="btn btn-outline-primary btn-sm dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false"  title="Submit Budget"
               disabled="@(item.status==(int)EntryStatus.Unsubmitted?false:true)">
				<span class="oi oi-task"></span>
			  </button>
			  <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
				<li><a href="javascript:void(0)" class="dropdown-item"  @onclick="()=>{SetSubProgramStatus(item,EntryStatus.Submitted, OperationType.Submit);}">Submit</a></li>
			  </ul>
              <AuthorizeView  Roles="Administrator, BudgetStaff"> 
             <button class="btn btn-outline-warning btn-sm dropdown-toggle" type="button" id="dropdownMenuButton2" data-bs-toggle="dropdown" aria-expanded="false"  title="Send Back to Ministry"
             disabled="@(item.status==(int)EntryStatus.Submitted?false:true)"
             >
				<span class="oi oi-loop"></span>
			  </button>
			  <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton2">
				<li><a href="javascript:void(0)" class="dropdown-item" @onclick="()=>{SetSubProgramStatus(item,EntryStatus.Unsubmitted, OperationType.Reject);}">Send Back</a></li>
			  </ul>
             <button class="btn btn-outline-success btn-sm dropdown-toggle" type="button" id="dropdownMenuButton3" data-bs-toggle="dropdown" aria-expanded="false"  title="Approve Budget"
             disabled="@(item.status==(int)EntryStatus.Submitted?false:true)">
				<span class="oi oi-check"></span>
			  </button>
			  <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton3">
				<li><a href="javascript:void(0)" class="dropdown-item" @onclick="()=>{SetSubProgramStatus(item,EntryStatus.Approved, OperationType.Approve);}">Approve Budget</a></li>
			  </ul>
                                <button type="button" class="btn btn-outline-secondary btn-sm" disabled="@(item.status==(int)EntryStatus.Unsubmitted?true:false)" title="Budget Adjustment"><span class="oi oi-pie-chart"></span></button>
              </AuthorizeView> 
              </td>
          <th  @onclick="() => NavigateTo(year,ministry,program,item.item)" style="cursor:pointer;">@item.item</th>
          <td @onclick="() => NavigateTo(year,ministry,program,item.item)" style="cursor:pointer;">@item.itemName</td>
          <td class="text-end" style="background-color:lightgray">@item.year0.ToString("C")</td>
          <td class="text-end"><b>@item.year1.ToString("C")</b></td>
          <td class="text-end">@item.year2.ToString("C")</td>
          <td class="text-end">@item.year3.ToString("C")</td>
        </tr>
            }
                   <tr  style="background-color:lightyellow"> 
          <th scope="row"></th>
          <td colspan="2"><b><i>Total:</i></b></td>
          <td class="text-end" style="background-color:lightgoldenrodyellow">@year0T.ToString("C")</td>
          <td class="text-end"><b>@year1T.ToString("C")</b></td>
          <td class="text-end">@year2T.ToString("C")</td>
          <td class="text-end">@year3T.ToString("C")</td>
        </tr>             
            </tbody>
       </table>
    }
}

@code {
    [Parameter]
    public int year { get; set; }
    [Parameter]
    public string ministry { get; set; }
    [Parameter]
    public string program { get; set; }

    private string ministryName;
    private string programName;
    private string username;

    public int year0T = 0;
    public int year1T = 0;
    public int year2T = 0;
    public int year3T = 0;

    private List<GroupingModel> subprogramGroup;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        username = authState.User.Identity.Name;
        try { ministryName= await _db.GetMinistryName(ministry); } catch{}
        try { programName = await _db.GetProgramName(program); } catch{}
        subprogramGroup= await _rdb.GetSubProgramDataForYear(year,ministry,program,username);
        year0T = subprogramGroup.Sum(x=>x.year0);
        year1T = subprogramGroup.Sum(x=>x.year1);
        year2T = subprogramGroup.Sum(x=>x.year2);
        year3T = subprogramGroup.Sum(x=>x.year3);
    }
    protected override async void OnParametersSet()
    {
        try { ministryName= await _db.GetMinistryName(ministry); } catch{}
        try { programName = await _db.GetProgramName(program); } catch{}
        subprogramGroup= await _rdb.GetSubProgramDataForYear(year,ministry,program,username);
        year0T = subprogramGroup.Sum(x=>x.year0);
        year1T = subprogramGroup.Sum(x=>x.year1);
        year2T = subprogramGroup.Sum(x=>x.year2);
        year3T = subprogramGroup.Sum(x=>x.year3);
        base.StateHasChanged();
    }

    private void NavigateTo(int year, string ministry, string program, string subprogram)
    {
        NavigationManager.NavigateTo($"recurrent/{year}/{ministry}/{program}/{subprogram}", forceLoad: true);

    }
    private async void RefreshList()
    {
        subprogramGroup= await _rdb.GetSubProgramDataForYear(year,ministry,program,username);
        base.StateHasChanged();
    }


    private async void SetSubProgramStatus(GroupingModel item,EntryStatus entryStatus, OperationType operationType)
    {
        //operationType
        int success = await _rdb.SetRecEntryStatus(year,item.item,(int)entryStatus);
        //if we got an error return
        if (success==0)
        {
            await JsRuntime.InvokeVoidAsync("alert", "ERROR Occured"); // Alert
            return;
        }
        item.status = (int)entryStatus;
        switch(operationType) 
            {
              case OperationType.Approve:
                await JsRuntime.InvokeVoidAsync("alert", "Success! Budget Approved"); // Alert
                break;
              case OperationType.Reject:
                await JsRuntime.InvokeVoidAsync("alert", "Success! Budget Sent Back to Ministry"); // Alert
                //TODO: Email User
                break;
              case OperationType.Submit:
                await JsRuntime.InvokeVoidAsync("alert", "Success! Budget Submitted Successfully"); // Alert
                //TODO: Email Budget User
                break;
              case OperationType.Unaprove:
                await JsRuntime.InvokeVoidAsync("alert", "Success!"); // Alert
                break;

            }
        RefreshList();

    }



}
