@page "/capital/{year:int}"

@using DataAccessLibrary.Models;
@using DataAccessLibrary;

@using CsvHelper;
@using CsvHelper.Configuration;
@using System.Globalization;

@inject ICAPBudgetData _cdb;
@inject NavigationManager NavigationManager;
@inject AuthenticationStateProvider authStateProvider;
@attribute [Authorize(Roles = "Administrator,MinistryStaff,BudgetStaff")];
@inject IJSRuntime JSRuntime

<h3>Ministry Estimates</h3>

<button type="button" class="btn btn-info" data-bs-toggle="modal" data-bs-target="#newEntry">Add Record</button>

<button type="button" class="btn btn-secondary" @onclick='() => NavigateTo("capital", "add", null)'>Bulk Upload</button>
<br />
<br />

<Cap_AddEntry_New year="@year" OnSaveEntry="@RefreshList" Id="selectId" EditModel="editModel"></Cap_AddEntry_New>

<!-- TABLE -->
<!-- ---------------------------------------------------------------------------------- -->
@if (data is null)
{
    <Loading></Loading>
}
else
{
    @if (data.Count == 0)
    {
        <p>No entries found for @year - @(year+1)</p>
    }
    else
    {
        <button class="btn btn-warning btn-sm mb-2" @onclick="ExportCsv">Export Data</button>
        
        <table class="table table-hover">

            <thead style="background-color:lightseagreen">
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Ministry</th> 
                    <th scope="col" class="text-end">Program</th>
                    <th scope="col" class="text-end">Sub Program</th>
                    <th scope="col" class="text-end">Account</th>
                    <th scope="col" class="text-end">Project</th>
                    <th scope="col" class="text-end">Name</th>
                    <th scope="col" class="text-end">Amount</th>
                    <th scope="col">Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in data)
                {
                    <tr>
                        <th scope="row" style="cursor:pointer;">@item.id</th>
                        <td style="cursor:pointer;">@item.ldr_entity_id@item.ministry</td>                        
                        <td class="text-end"><b>@item.program</b></td>
                        <td class="text-end"><b>@item.subprog</b></td>
                        <td class="text-end"><b>@item.account</b></td>
                        <td class="text-end"><b>@item.project</b></td>
                        <td class="text-end"><b>@item.Name</b></td>
                        <td class="text-end"><b>@item.ldr_amt_0</b></td>
                        <td>
                            <div class="btn-group">
                                <button class="btn btn-info btn-sm" @onclick="@(()=> {EditClick(item.id);})" data-bs-toggle="modal" data-bs-target="#newEntry">Edit</button>
                                <button class="btn btn-danger btn-sm" @onclick="@(()=> { selectId = item.id;})" data-bs-toggle="modal" data-bs-target="#deleteModal">Delete</button>
                            </div>
                        </td>
                    </tr>
                }
                <tr style="background-color:lightyellow">
                    <th scope="row"></th>
                    <td class="text-end"></td>
                    <td class="text-end"></td>
                    <td class="text-end"></td>
                    <td class="text-end"></td>
                    <td class="text-end"></td>
                    <td class="text-end"></td>
                    <td class="text-end">@tot</td>
                    <td class="text-end"></td>
                </tr>
            </tbody>
        </table>
    }
}
<div class="modal" id="deleteModal" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header px-4">
                <h5 class="modal-title" id="addNewModalLabel">Are you sure you want to proceed?</h5>
            </div>
            <EditForm Model="@selectId" OnValidSubmit="@DeleteClick">
                <div class="modal-footer px-4">
                    <button type="button" class="btn btn-secondary me-2" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary px-4">Confirm</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>
@code {
    [Parameter]

    // READ
    public int year { get; set; }
    private string username;
    private List<CAPBudgetModel> data;
    public int tot = 0;
    public int selectId = 0;
    CAPBudgetModel? editModel;

    protected override async Task OnInitializedAsync()
    {
        // READ
        data = await _cdb.GetData(year);
        tot = data.Sum(x => Convert.ToInt32(x.ldr_amt_0));        
    }

    protected override async void OnParametersSet()
    {
        data = await _cdb.GetData(year);
        tot = data.Sum(x => Convert.ToInt32(x.ldr_amt_0));

        base.StateHasChanged();
    }



    // NAVIGATION LOGIC
    // *********************************************************
    private void NavigateTo(string site, string route, int? id)
    {
        if (site.Equals("capital") && route.Equals("add"))
        {
            NavigationManager.NavigateTo($"{site}/{route}/{id}");
        }       
    }

    private async Task RefreshList()
    {
        data = await _cdb.GetData(year);
        tot = data.Sum(x => Convert.ToInt32(x.ldr_amt_0));
        selectId = 0;
        base.StateHasChanged();
    }
    public async Task DeleteClick()
    {
        await _cdb.Delete(selectId);
        await JSRuntime.InvokeAsync<object>("MCloseModal", "#deleteModal");
        await RefreshList();
    }

    void EditClick(int id)
    {
        selectId = id;
        editModel = data.FirstOrDefault(x => x.id == id);
    }

    async Task ExportCsv()
    {
        byte[] bytes;

        using (var memoryStream = new MemoryStream())
        using (var writer = new StreamWriter(memoryStream))
        using (var csv = new CsvWriter(writer, new CsvConfiguration(CultureInfo.InvariantCulture)))
        {
            csv.WriteRecords(data);
            writer.Flush();
            bytes = memoryStream.ToArray();
        }

        var bytesBase64 = Convert.ToBase64String(bytes);

        await JSRuntime.InvokeVoidAsync("DownloadCSV", bytesBase64);
    }
}
