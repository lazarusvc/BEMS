@page "/capital/add"
@using System.Globalization;
@using DataAccessLibrary.Models;

@using System.Text;
@using System.Collections.Generic;
@using System.IO;
@using System.Net.Http.Headers;
@using CsvHelper;
@using CsvHelper.Configuration;
@using DataAccessLibrary;

@inject ICAPBudgetData _cdb;
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment Environment
@inject IConfiguration config
@if (isLoading)
{
    <Loading></Loading>
}
<div class="row justify-content-center">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                <h5 class="font-weight-bold">Bulk Upload</h5>
            </div>
            <div class="card-body">
                <div class="form-group">
                    <small class="form-text text-muted">Accepted file type: .csv</small>
                </div>
                <div class="text-center pb-3">
                    <InputFile OnChange="@LoadFiles" class="form-control" accept=".csv" />
                </div>
                <div style="color: red">
                    @saveError
                </div>
                <div style="color: green">
                    @saveSuccess
                </div>
            </div>
        </div>
    </div>
</div>

<a href="/CsvTemplate.csv" class="btn btn-warning btn-sm mt-3">Download Template CSV</a>

@code {
    private long maxFileSize = 1024 * 1024 * 1; // represents 3MB
    private int maxAllowedFiles = 1;

    private string saveError;
    private string saveSuccess;

    bool isLoading = false;

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        var records = new List<CAPBudgetModel>();
        int successCount = 0;
        saveError = "";
        saveSuccess = "";

        if (e.FileCount > maxAllowedFiles)
        {
            saveError = $"Error: Attempting to upload {e.FileCount} files, but only {maxAllowedFiles} files are allowed";
            return;
        }

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                string newFileName = Path.ChangeExtension(
                    Path.GetRandomFileName(),
                    Path.GetExtension(file.Name));

                string path = Path.Combine(Environment.WebRootPath + @"\Temp", newFileName);

                Directory.CreateDirectory(Environment.WebRootPath + @"\Temp");

                await using (FileStream fs = new(path, FileMode.Create))
                {
                    await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
                }

                using (var reader = new StreamReader(path))

                using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))
                {
                    records = csv.GetRecords<CAPBudgetModel>().ToList();
                }
                File.Delete(path);

                foreach (var item in records)
                {
                    var inserted = await _cdb.INSERT_CaptialEntry(item);
                    if (inserted > 0) successCount++;
                }

                saveSuccess = $"{successCount} Records Successfully Saved.";
            }
            catch (Exception ex)
            {
                saveError = $"File: {file.Name} Error: {ex.Message}";
            }
        }

        isLoading = false;
    }
}
